--- __init__.py	2025-10-19 15:54:02
+++ __init__.py	2025-10-19 15:54:42
@@ -8,35 +8,6 @@
 from importlib import resources
 
 
-def _ensurepip_is_disabled_in_debian_for_system():
-    # Detect if ensurepip is being executed inside of a python-virtualenv
-    # environment and return early if so.
-    if hasattr(sys, "real_prefix"):
-        return
-
-    # Detect if ensurepip is being executed inside of a stdlib venv
-    # environment and return early if so.
-    if sys.prefix != getattr(sys, "base_prefix", sys.prefix):
-        return
-
-    # If we've gotten here, then we are running inside of the system Python
-    # and we don't want to use ensurepip to install into the system Python
-    # so instead we'll redirect the user to using dpkg and apt-get.
-    print("""\
-ensurepip is disabled in Debian/Ubuntu for the system python.
-
-Python modules for the system python are usually handled by dpkg and apt-get.
-
-    apt install python3-<module name>
-
-Install the python3-pip package to use pip itself.  Using pip together
-with the system python might have unexpected results for any system installed
-module, so use it on your own risk, or make sure to only use it in virtual
-environments.
-""")
-    sys.exit(1)
-
-
 __all__ = ["version", "bootstrap"]
 _PACKAGE_NAMES = ("pip",)
 _PIP_VERSION = "24.0"
@@ -192,10 +163,6 @@
     Note that calling this function will alter both sys.path and os.environ.
     """
 
-    # Ensure that we are only running this inside of a virtual environment
-    # of some kind.
-    _ensurepip_is_disabled_in_debian_for_system()
-
     if altinstall and default_pip:
         raise ValueError("Cannot use altinstall and default_pip together")
 
