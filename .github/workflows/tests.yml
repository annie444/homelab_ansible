---
name: "CI"

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  changelog:
    runs-on: ubuntu-latest
    name: Requires changelog
    timeout-minutes: 30
    if: "!contains(github.event.pull_request.labels.*.name, 'skip-changelog')"
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup python
        uses: actions/setup-python@v6
        with:
          cache: pip
          python-version: "3.13"

      - name: Install python dependencies
        run: |
          pip install -U pyyaml antsibull-changelog

        shell: bash
      - name: Validate changelog
        run: |
          antsibull-changelog lint
        shell: bash

  build-import:
    name: Build and Import
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          cache: pip
          python-version: "3.13"

      - name: Ensure ansible-core and galaxy-importer is installed
        shell: bash
        run: |
          pip install ansible-core galaxy-importer

      - name: Update galaxy-importer cfg
        shell: bash
        run: |
          echo -e "[galaxy-importer]\nCHECK_REQUIRED_TAGS=True" > /tmp/galaxy-importer.cfg
          export GALAXY_IMPORTER_CONFIG=/tmp/galaxy-importer.cfg

      - name: Build the collection tarball and run galaxy importer on it
        shell: bash
        run: |
          python -m galaxy_importer.main --git-clone-path . --output-path /tmp
        env:
          GALAXY_IMPORTER_CONFIG: /tmp/galaxy-importer.cfg

  ansible-lint:
    name: Ansible Lint
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          cache: pip
          python-version: "3.13"

      - name: Install ansible-lint from pip
        shell: bash
        run: |
          pip install ansible-lint
          ansible-lint --version

      - name: Run ansible-lint
        shell: bash
        run: |
          ansible-lint

  tox-matrix:
    name: Get Tox Matrix
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      integration-matrix: ${{ steps.integration-matrix.outputs.envlist }}
      sanity-matrix: ${{ steps.sanity-matrix.outputs.envlist }}
      unit-matrix: ${{ steps.unit-matrix.outputs.envlist }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"
          cache: pip

      - name: Install Podman
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: podman
          version: "matrix-1.0"

      - name: Install Python dependencies
        shell: bash
        run: |
          python3.13 -m pip install tox-ansible
          python3.13 -m tox --version

      - name: Generate sanity matrix
        id: sanity-matrix
        run: >
          python3.13 -m tox --ansible --gh-matrix --matrix-scope sanity --conf tox-ansible.ini

      - name: Generate unit matrix
        id: unit-matrix
        run: >
          python3.13 -m tox --ansible --gh-matrix --matrix-scope unit --conf tox-ansible.ini

      - name: Generate integration matrix
        id: integration-matrix
        run: >
          python3.13 -m tox --ansible --gh-matrix --matrix-scope integration --conf tox-ansible.ini

  sanity:
    name: Run tox sanity tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs:
      - tox-matrix
    strategy:
      fail-fast: false
      matrix:
        tox: ${{ fromJSON(needs.tox-matrix.outputs.sanity-matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "${{ matrix.tox.python }}"
          cache: pip

      - name: Install Podman
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: podman
          version: "tests-1.0"

      - name: Install Python dependencies
        run: |
          pip install -r test-requirements.txt

      - name: Install build toolchain and openssl headers on Linux
        uses: awalsh128/cache-apt-pkgs-action@latest
        if: ${{ matrix.tox.python >= 3.12 }}
        with:
          packages: build-essential libssl-dev libssh-dev
          version: "deps-1.0"

      - name: Run tox unit tests
        run: >-
          tox --ansible -e ${{ matrix.tox.name }} --conf tox-ansible.ini

  unit:
    name: Run tox unit tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs:
      - tox-matrix
    strategy:
      fail-fast: false
      matrix:
        tox: ${{ fromJSON(needs.tox-matrix.outputs.unit-matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "${{ matrix.tox.python }}"
          cache: pip

      - name: Install Podman
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: podman
          version: "tests-1.0"

      - name: Install Python dependencies
        run: |
          pip install -r test-requirements.txt

      - name: Install build toolchain and openssl headers on Linux
        uses: awalsh128/cache-apt-pkgs-action@latest
        if: ${{ matrix.tox.python >= 3.12 }}
        with:
          packages: build-essential libssl-dev libssh-dev
          version: "deps-1.0"

      - name: Run tox unit tests
        run: >-
          tox --ansible -e ${{ matrix.tox.name }} --conf tox-ansible.ini

  integration:
    name: Run tox integration tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs:
      - tox-matrix
    environment:
      name: rhel
    strategy:
      fail-fast: false
      matrix:
        tox: ${{ fromJSON(needs.tox-matrix.outputs.integration-matrix) }}
    permissions:
      packages: write
      contents: read
      deployments: write
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "${{ matrix.tox.python }}"
          cache: pip

      - name: Install Podman
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: podman
          version: "tests-1.0"

      - name: Install Python dependencies
        run: |
          pip install -r test-requirements.txt

      - name: Install build toolchain and openssl headers on Linux
        uses: awalsh128/cache-apt-pkgs-action@latest
        if: ${{ matrix.tox.python >= 3.12 }}
        with:
          packages: build-essential libssl-dev libssh-dev
          version: "deps-1.0"

      - name: Run tox integration tests
        run: >-
          tox --ansible -e ${{ matrix.tox.name }} --conf tox-ansible.ini -- -vvv
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          GHCR_USERNAME: "${{ github.actor }}"
          GHCR_PASSWORD: "${{ secrets.GITHUB_TOKEN }}"
          RHEL_USER: "${{ secrets.RHEL_USERNAME }}"
          RHEL_PASS: "${{ secrets.RHEL_PASSWORD }}"
          CI: "true"

  all-green:
    if: always()
    needs:
      - build-import
      - ansible-lint
      - sanity
      - unit
      - integration
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
